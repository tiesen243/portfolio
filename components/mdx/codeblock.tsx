'use client'

import type { ScrollAreaViewportProps } from '@radix-ui/react-scroll-area'
import type { ButtonHTMLAttributes, HTMLAttributes, ReactElement, ReactNode } from 'react'
import { forwardRef, useCallback, useRef } from 'react'
import { Check, Copy } from 'lucide-react'

import { buttonVariants } from '@/components/ui/button'
import { ScrollArea, ScrollBar, ScrollViewport } from '@/components/ui/scroll-area'
import { useCopyButton } from '@/hooks/use-copy-button'
import { cn } from '@/lib/utils'

export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean

  viewportProps?: ScrollAreaViewportProps
}

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, ...props }, ref) => {
    return (
      <pre
        ref={ref}
        className={cn('p-4 focus-visible:outline-none', className)}
        {...props}
      >
        {props.children}
      </pre>
    )
  },
)

Pre.displayName = 'Pre'

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  (
    { title, allowCopy = true, keepBackground = false, icon, viewportProps, ...props },
    ref,
  ) => {
    const areaRef = useRef<HTMLDivElement>(null)
    const onCopy = useCallback(() => {
      const pre = areaRef.current?.getElementsByTagName('pre').item(0)

      if (!pre) return

      const clone = pre.cloneNode(true) as HTMLElement
      clone.querySelectorAll('.nd-copy-ignore').forEach((node) => {
        node.remove()
      })

      void navigator.clipboard.writeText(clone.textContent ?? '')
    }, [])

    return (
      <figure
        ref={ref}
        {...props}
        className={cn(
          'group bg-secondary/50 relative my-6 overflow-hidden rounded-lg border text-sm',
          keepBackground && 'bg-[var(--shiki-light-bg)] dark:bg-[var(--shiki-dark-bg)]',
          props.className,
        )}
      >
        {title ? (
          <div className="bg-muted flex flex-row items-center gap-2 border-b px-4 py-1.5">
            {icon ? (
              <div
                className="text-muted-foreground [&_svg]:size-3.5"
                dangerouslySetInnerHTML={
                  typeof icon === 'string'
                    ? {
                        __html: icon,
                      }
                    : undefined
                }
              >
                {typeof icon !== 'string' ? icon : null}
              </div>
            ) : null}
            <figcaption className="text-muted-foreground flex-1 truncate">
              {title}
            </figcaption>
            {allowCopy ? <CopyButton className="-me-2" onCopy={onCopy} /> : null}
          </div>
        ) : (
          allowCopy && (
            <CopyButton
              className="absolute top-2 right-2 z-[2] backdrop-blur-md"
              onCopy={onCopy}
            />
          )
        )}
        <ScrollArea ref={areaRef} dir="ltr">
          <ScrollViewport
            {...viewportProps}
            className={cn('max-h-[600px]', viewportProps?.className)}
          >
            {props.children}
          </ScrollViewport>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </figure>
    )
  },
)

CodeBlock.displayName = 'CodeBlock'

function CopyButton({
  className,
  onCopy,
  ...props
}: ButtonHTMLAttributes<HTMLButtonElement> & {
  onCopy: () => void
}): ReactElement {
  const [checked, onClick] = useCopyButton(onCopy)

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({
          variant: 'ghost',
        }),
        'transition-opacity group-hover:opacity-100',
        !checked && 'opacity-0',
        className,
      )}
      aria-label="Copy Text"
      onClick={onClick}
      {...props}
    >
      <Check className={cn('size-3.5 transition-transform', !checked && 'scale-0')} />
      <Copy
        className={cn('absolute size-3.5 transition-transform', checked && 'scale-0')}
      />
    </button>
  )
}
